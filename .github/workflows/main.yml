# Name of the workflow, visible in the Actions tab.
name: Java Build and Package Workflow

# Defines the events that will trigger the workflow.
on:
  push:
    branches:
      - main   # Run on every push to the 'main' branch
  pull_request:
    branches:
      - main   # Run on every pull request to the 'main' branch
  workflow_dispatch:  # Enables manual trigger of the workflow      

# Defines all the jobs for the workflow.
jobs:
  build:
    # The 'runs-on' keyword specifies the operating system the job will use. 'ubuntu-latest' is the latest version of Ubuntu.
    runs-on: ubuntu-latest

    # Steps to be executed in the job.
    steps:
      # Step 1: Check out the code from the repository.
      - name: Check out the repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK (Java Development Kit).
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Using Temurin JDK distribution
          java-version: '11'       # Use Java version 11

      # Step 3: Cache Maven dependencies to improve build speed.
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository   # Maven dependencies location
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}   # Cache key based on OS and POM file
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build and package the Java project using Maven.
      - name: Build and package the project
        run: mvn package -DskipTests=false  # Runs 'mvn package' which compiles, tests, and packages the project

      # Step 5: Run tests (optional, if not done during the packaging step).
      # If you skipped tests during packaging (with `-DskipTests=true`), you can add a separate step for running tests here.
      # This step will run tests using Maven's test goal.
      # - name: Run tests
      #   run: mvn test  # This is optional if `-DskipTests=false` is used in the package step

      # Step 6: Upload the packaged artifact (JAR or WAR) so it can be accessed after the workflow completes.
      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: java-package               # Name for the uploaded artifact
          path: target/*.jar               # Path to the packaged JAR file (change to .war if it's a WAR file)
      
      # Step 7: Upload test results (optional). You can upload test reports for later review.
      - name: Upload test results
        if: always()   # Ensure this step runs even if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: test-results               # Name for the test results
          path: target/surefire-reports/   # Path to the test result files generated by Maven
