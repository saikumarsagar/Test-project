# Name of the workflow, visible in the Actions tab.
name: Java Build and Package Workflow

# Defines the events that will trigger the workflow.
on:
  push:
    branches:
      - main   # Run on every push to the 'main' branch
  pull_request:
    branches:
      - main   # Run on every pull request to the 'main' branch
  workflow_dispatch:  # Enables manual trigger of the workflow      

# Define the jobs for the workflow
jobs:
  build:
    # Specify the OS to run the job on
    runs-on: ubuntu-latest

    # Steps to be executed
    steps:
      # Step 1: Check out the code from the repository
      - name: Check out the repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 11 (for building the Java app)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Step 3: Cache Maven dependencies for faster builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build and package the Java project using Maven
      #test
      - name: Build and package the project
        run: mvn package -DskipTests=false

      # Step 5: Build Docker image from Dockerfile
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/project1-docker:latest .

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}   # Docker Hub username stored as a GitHub secret
          password: ${{ secrets.DOCKER_PASSWORD }}   # Docker Hub password stored as a GitHub secret

      # Step 7: Push Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/project1-docker:latest

      # Step 8: Upload the packaged artifact (optional, if you want the JAR as well)
      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: java-package
          path: target/*.war
